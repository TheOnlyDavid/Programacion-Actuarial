set.seed(20)
B0 = 0.5
B1 = 2
x = rnorm(100)
e = rnorm(100, 0, 2)
y = B0 + B1*x + e
y
set.seed(20)
B0 = 0.5
B1 = 2
x = rnorm(100, 0 , 1)
e = rnorm(100, 0, 2)
y = B0 + B1*x + e
plot(x,y)
z = B0 + B1*x
plot(x,z)
set.seed(10)
x = rbinom(100, 1, 0.5)
e = rnorm(100, 0 ,2)
y = 0.5 +2*x +e
summary(y)
?plot
set.seed(10)
x = rbinom(100, 1, 0.5)
e = rnorm(100, 0 ,2)
y = 0.5 +2*x +e
summary(y)
plot(x, y, main="modelo lineal", col="red")
set.seed(10)
x = rbinom(100, 1, 0.5)
e = rnorm(100, 0 ,2)
y = 0.5 +2*x +e
summary(y)
plot(x, y, main="modelo lineal", col="dark red")
set.seed(1)
x = rnorm(100,0,1)
log.mu = 0.5 +0.3*x
y = rpois(100, exp(log.mu))
summary(y)
plot(x, y, main = "Modelo poisson", col = "forestgreen")
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10, replace = T)
system.time(readLines("http://fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
hilert = function(n){
i = 1:n
1/outer(i-1,i,"+")
}
hilert(1000)
hilert(1000)
hilbert = function(n){
i = 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
x = hilbert(1000)
?svd
x = hilbert(1000)
system.time(svd(x))
library("swirl")
swirl
swirl()
my_vector(1:20)
my_vector = (1:20)
my_vector <- (1:20)
my_vector <- c(1:20)
my_vector <- c(1:3)
info()
my_vector <- c(1:3)
my_vector <- c(1:20)
my_vector <- c(1:20)
my_vector <- c(1:22)
my_vector <- c(1:20)
skip()
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?`matrix()
)
((()))
?
//
asd
xcz
vxcv
b/
`12
1231
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5!-7
5!=7
5!==7
5 !== 7
5 == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE).
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE, FALSE)
TRUE || c(TRUE,FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
INTS
ints
ints>5
wich(ints>7)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
lk
1+2
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[2]}, c(8, 4, 0))
evaluate(function(x){x[2]}, c(8, 4, 0))?paste
?paste
paste("Programming", "is", "fun!")
submit()
telegram("fuck u")
submit()
mad_libs("f", "u", "p")
submit()
"i" %p% "love" %p% "R"
"i" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flag)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_val
unique_vals
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
>tapply
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 1)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- smaple(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois
)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <-  strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab =  "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab =  "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab =  "Stopping Distance")
plot(cars, main = "My plot"
)
plot(cars, main = "My plot")
plot(cars, main = "My plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
x = c(1,3,5)
y = c(3,2,10)
rbind(x,y)
x = list(2,"a","b",T)
X[[2]]
head(airquality)
dim(airquality)
airquality[47]
airquality[47,]
airquality$ozone
is.na(airquality$Ozone)
x = is.na(airquality$Ozone)
x
sum(x)
?mean
mean(airquality$ozone, na.rm = T)
mean(airquality, na.rm = T)
summary(airquality)
?vapply
?tapply
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
5
skip()
tapply(airquality$Ozone, airquality$Temp, mean)
sapply(airquality$Ozone, airquality$Temp, mean)
tapply(airquality$Ozone, airquality$Temp, mean)
head(airquality)
x = airquality$Ozone > 31
x
y = airquality$Temp > 90
tapply(airquality$Solar.R,x,y mean)
tapply(airquality$Solar.R , x, y,  mean)
rbind(x,y)
w = rbind(x,y)
tapply(airquality$Solar.R , w,  mean)
tapply(w , airquality$Solar.R,  mean)
x = airquality
x = airquality$Ozone>30 & airquality$Temp>90
x
x = airquality$Ozone>30 && airquality$Temp>90
x
x = airquality$Ozone>30 & airquality$Temp>90
head(airquality)
sumary(airquality[40:60])
sumary(airquality[40:60,])
summary(airquality[40:60,])
airquality[40:60,]
airquality[30:70,]
airquality[30:62,]
airquality[30:61,]
airquality[31:61,]
airquality[32:61,]
summary(airquality[32:61,])
airquality[0:30,]
airquality[0:31,]
airquality[0:32,]
airquality[0:31,]
summary(airquality[0:31,])
mejor = function(estado, resultado) {
#Datos
if(!(resultado %in% as.vector(c("neumonia","falla","ataque")))){
stop("Invalid outcome")
}
if(resultado == "ataque"){
resultado = 11
}
if(resultado == "falla"){
resultado = 17
}
if(resultado == "neumonia"){
resultado = 23
}
out1 = read.csv("outcome-of-care-measures.csv")
state =  as.character(out1$State)
if(!(estado %in% state)){
stop("Invalid state")
}
#Trabajo
sub1 = subset(out1, state == estado)
sub2 = sub1[grep("[[:digit:]]", sub1[,resultado]), ]
num =  sub2[,resultado]
num1 = sort(as.numeric(as.vector(num)))
num2 = as.numeric(num1[1])
if(num2 == round(num2,0)){
numf = paste(num2, ".0", sep = "")
}else{
numf = num1[1]
}
sub3 = subset(sub2, as.vector(sub2[,resultado]) == numf)
sub4 = sub3[order(sub3[,2]),]
x = sub4[1,2]
as.character(x)
}
rankhospital = function(estado="TX", resultado = "ataque", num = "mejor") {
#Datos
if(!(resultado %in% as.vector(c("neumonia","falla","ataque")))){
stop("Invalid outcome")
}
if(resultado == "ataque"){
resultado = 11
}
if(resultado == "falla"){
resultado = 17
}
if(resultado == "neumonia"){
resultado = 23
}
out1 = read.csv("outcome-of-care-measures.csv")
state =  as.character(out1$State)
if(!(estado %in% state)){
stop("Invalid state")
}
#Trabajo
sub1 = subset(out1, state == estado)
sub2 = sub1[grep("[[:digit:]]", sub1[,resultado]), ]
sub3 = data.frame(as.vector(sub2[,2]), sub2[,resultado])
colnames(sub3) = c("Hospital", "Res")
sortdat = sub3[order(as.numeric(as.vector(sub3[,2])), sub3[,1]) , ]
if(num == "mejor"){
num = 1
}
if(num == "peor"){
num = length(sub3[,1])
}
as.vector(sortdat[num,1])
}
rankingcompleto = function(resultado = "ataque", num = "mejor") {
#Datos
if(!(resultado %in% as.vector(c("neumonia","falla","ataque")))){
stop("Invalid outcome")
}
if(resultado == "ataque"){
resultado = 11
}
if(resultado == "falla"){
resultado = 17
}
if(resultado == "neumonia"){
resultado = 23
}
#Trabajo
out1 = read.csv("outcome-of-care-measures.csv")
out1 = out1[grep("[[:digit:]]", out1[,resultado]), ]
out2 = data.frame(out1[,2],out1[,7], out1[, resultado])
colnames(out2) = c("Hospital", "Estado", "Resultado")
out2 = out2[order(out1[,7], out1[,2]), ]
final = NULL
a = split(out2, out2[,2])
for(y in 1:54){
num2 = num
num1 = length(which(y == as.numeric(out2[,2])))
b = as.data.frame(a[y])
a = b[order(as.numeric(as.vector(b[,3])), b[,1]), ]
if(num == "mejor"){
num2 = 1
}
if (num == "peor"){
num2 = num1
}
a = data.frame(a[num2,1], a[1,2])
final = rbind(final, a)
a = split(out2, out2[,2])
num = num
}
colnames(final) = c("Hospital", "Estado")
final
}
mejor("MD", "falla")
setwd("C:/Users/Aaron/Documents/GitHub/ProgramacionActuarial3/2")
mejor("MD", "falla")
